#Introdução 

git add = (Adicione o conteúdo do arquivo ao índice) Este comando atualiza o índice utilizando o conteúdo atual encontrado na árvore de trabalho para preparar o conteúdo para o próximo commit. Em geral ele adiciona o conteúdo atual dos caminhos existentes como um todo, mas com algumas opções ele também pode ser utilizado para adicionar o conteúdo com apenas a parte das alterações aplicadas nos arquivos da árvore de trabalho ou remover os caminhos que não existam mais na árvore de trabalho. 

git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
	  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
	  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]
	  [--chmod=(+|-)x] [--pathspec-from-file=<arquivo> [--pathspec-file-nul]]
	  [--] [<pathspec>…?]



git clone = (Clona um repositório em um novo diretório) Este comando atualiza o índice utilizando o conteúdo atual encontrado na árvore de trabalho para preparar o conteúdo para o próximo commit. Em geral ele adiciona o conteúdo atual dos caminhos existentes como um todo, mas com algumas opções ele também pode ser utilizado para adicionar o conteúdo com apenas a parte das alterações aplicadas nos arquivos da árvore de trabalho ou remover os caminhos que não existam mais na árvore de trabalho.

git clone [--template=<diretório-modelo>]
	  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
	  [-o <nome>] [-b <nome>] [-u <upload-pack>] [--reference <repositório>]
	  [--dissociate] [--separate-git-dir <dir git>]
	  [--depth <profundidade>] [--[no-]single-branch] [--no-tags]
	  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]
	  [--[no-]remote-submodules] [--jobs <n>] [--sparse]
	  [--filter=<filter>] [--] <repositório>
	  [<diretório>]



git init = (Cria um repositório Git vazio ou reinicializa um já existente) Este comando cria um repositório Git vazio, basicamente um diretório .git com subdiretórios para os arquivos objects, refs/heads, refs/tags e arquivos modelo. Também é criado um arquivo inicial HEAD que tem como referencia o HEAD do ramo principal.

git init [-q | --quiet] [--bare] [--template=<diretório-modelo>]
	  [--separate-git-dir <dir git>] [--object-format=<formato>]
	  [-b <nome-do-ramo> | --initial-branch=<nome-do-ramo>]
	  [--shared[=<permissões>]] [diretório]
	  
	  



git-push = (Atualiza as refs remotas junto com os objetos associados a ela) Atualiza as refs remotas utilizando as refs locais, enquanto envia os objetos necessários para que seja concluída as refs informadas.Você pode fazer com que coisas que intereçam aconteçam com um repositório toda vez que você o adiciona, configurando os ganchos lá. Consulte a documentação para git-receive-pack[1].

git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
	   [--repo=<repositório>] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]
	   [-u | --set-upstream] [-o <texto> | --push-option=<texto>]
	   [--[no-]signed|--signed=(true|false|if-asked)]
	   [--force-with-lease[=<refname>[:<expect>]]]
	   [--no-verify] [<repositório> [<refspec>…?]]

git-pull = (Busque e integre-se a outro repositório ou em um ramo local)Incorpora as alterações de um repositório remoto no ramo atual. Em seu modo predefinido, o comando git pull é uma abreviação do comando git fetch seguido por git merge FETCH_HEAD. Mais precisamente, o comando git pull executa o git fetch com os parâmetros informados e chama o git merge para mesclar os cabeçalhos recuperados da ramificação no ramo atual. Com --rebase, ele executa o comando git rebase em vez do git merge.	   

git pull [<opções>] [<repositório> [<refspec>…?]]


git-branch = (Lista, cria ou exclui ramificações) Caso a opção --list seja utilizada ou caso não haja argumentos não opcionais, as ramificações existentes serão listadas; o ramo atual será destacado em verde e marcado com um asterisco. Quaisquer ramificações retiradas das áreas de trabalho vinculadas, serão destacadas em ciano e marcadas com um sinal de adição. A opção -r faz com que as ramificações monitoradas remotamente sejam listadas, a opção -a exibe as ramificações locais e as remotas.

git branch [--color[=<quando>] | --no-color] [--show-current]
	[-v [--abbrev=<comprimento> | --no-abbrev]]
	[--column[=<opções>] | --no-column] [--sort=<chaves>]
	[(--merged | --no-merged) [<commit>]]
	[--contains [<commit>]] [--no-contains [<commit>]]
	[--points-at <objeto>] [--format=<formato>]
	[(-r | --remotes) | (-a | --all)]
	[--list] [<padrão>…?]
git branch [--track | --no-track] [-f] <nome-do-ramo> [<ponto-de-partida>]
git branch (--set-upstream-to=<upstream> | -u <upstream>) [<nome-do-ramo>]
git branch --unset-upstream [<nome-do-ramo>]
git branch (-m | -M) [<ramo-antigo>] <nome-do-ramo>
git branch (-c | -C) [<ramo-antigo>] <novo-ramo>
git branch (-d | -D) [-r] <nome-do-ramo>…?
git branch --edit-description [<nome-do-ramo>]


